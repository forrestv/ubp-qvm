Index: src/game/g_active.c
===================================================================
RCS file: /devel/cvs/tremulous/src/game/g_active.c,v
retrieving revision 1.1.1.1.4.1
diff -u -p -r1.1.1.1.4.1 g_active.c
--- src/game/g_active.c	17 Feb 2009 02:38:26 -0000	1.1.1.1.4.1
+++ src/game/g_active.c	17 Feb 2009 04:15:23 -0000
@@ -837,8 +837,17 @@ void ClientTimerActions( gentity_t *ent,
 
       if( ent->health > 0 && ent->health < client->ps.stats[ STAT_MAX_HEALTH ] &&
           ( ent->lastDamageTime + ALIEN_REGEN_DAMAGE_TIME ) < level.time )
+      {
         ent->health += BG_FindRegenRateForClass( client->ps.stats[ STAT_PCLASS ] ) * modifier;
 
+        // if completely healed, cancel retribution
+        if( ent->health >= client->ps.stats[ STAT_MAX_HEALTH ] )
+        {
+          for( i = 0; i < MAX_CLIENTS; i++ )
+            ent->client->tkcredits[ i ] = 0;
+        }
+      }
+
       if( ent->health > client->ps.stats[ STAT_MAX_HEALTH ] )
         ent->health = client->ps.stats[ STAT_MAX_HEALTH ];
     }
Index: src/game/g_buildable.c
===================================================================
RCS file: /devel/cvs/tremulous/src/game/g_buildable.c,v
retrieving revision 1.1.1.1.4.1
diff -u -p -r1.1.1.1.4.1 g_buildable.c
--- src/game/g_buildable.c	17 Feb 2009 02:38:26 -0000	1.1.1.1.4.1
+++ src/game/g_buildable.c	17 Feb 2009 04:15:23 -0000
@@ -1996,6 +1996,13 @@ void HMedistat_Think( gentity_t *self )
       if( self->enemy->health >= self->enemy->client->ps.stats[ STAT_MAX_HEALTH ] &&
           !BG_InventoryContainsUpgrade( UP_MEDKIT, self->enemy->client->ps.stats ) )
         BG_AddUpgradeToInventory( UP_MEDKIT, self->enemy->client->ps.stats );
+
+      // if completely healed, cancel retribution
+      if( self->enemy->health >= self->enemy->client->ps.stats[ STAT_MAX_HEALTH ] )
+      {
+        for( i = 0; i < MAX_CLIENTS; i++ )
+          self->enemy->client->tkcredits[ i ] = 0;
+      }
     }
   }
 }
Index: src/game/g_combat.c
===================================================================
RCS file: /devel/cvs/tremulous/src/game/g_combat.c,v
retrieving revision 1.1.1.1.4.1
diff -u -p -r1.1.1.1.4.1 g_combat.c
--- src/game/g_combat.c	17 Feb 2009 02:38:26 -0000	1.1.1.1.4.1
+++ src/game/g_combat.c	17 Feb 2009 04:22:53 -0000
@@ -132,6 +132,7 @@ void player_die( gentity_t *self, gentit
   int       killer;
   int       i, j;
   char      *killerName, *obit;
+  float     totalTK = 0;
   float     totalDamage = 0.0f;
   float     percentDamage = 0.0f;
   gentity_t *player;
@@ -251,48 +252,9 @@ void player_die( gentity_t *self, gentit
     {
       AddScore( attacker, -1 );
 
-      // Retribution: transfer value of player from attacker to victim
-      if( g_retribution.integer) {
-          if(attacker!=self){
-        int max = ALIEN_MAX_KILLS, tk_value = 0;
-        char *type = "evos";
-
-        if( attacker->client->ps.stats[ STAT_PTEAM ] == PTE_ALIENS ) 
-        {
-            tk_value = BG_ClassCanEvolveFromTo( PCL_ALIEN_LEVEL0,
-            self->client->ps.stats[ STAT_PCLASS ], ALIEN_MAX_KILLS, 0 );
-        } else 
-        {
-          tk_value = BG_GetValueOfEquipment( &self->client->ps );
-          max = HUMAN_MAX_CREDITS;
-          type = "credits";
-        }
-
-        if( attacker->client->ps.persistant[ PERS_CREDIT ] < tk_value )
-          tk_value = attacker->client->ps.persistant[ PERS_CREDIT ];
-        if( self->client->ps.persistant[ PERS_CREDIT ]+tk_value > max )
-          tk_value = max-self->client->ps.persistant[ PERS_CREDIT ];
-
-        if( tk_value > 0 ) {
-
-          // adjust using the retribution cvar (in percent)
-          tk_value = tk_value*g_retribution.integer/100;
-
-          G_AddCreditToClient( self->client, tk_value, qtrue );
-          G_AddCreditToClient( attacker->client, -tk_value, qtrue );
-
-          trap_SendServerCommand( self->client->ps.clientNum,
-            va( "print \"Received ^3%d %s ^7from %s ^7in retribution.\n\"",
-            tk_value, type, attacker->client->pers.netname ) );
-          trap_SendServerCommand( attacker->client->ps.clientNum,
-            va( "print \"Transfered ^3%d %s ^7to %s ^7in retribution.\n\"",
-            tk_value, type, self->client->pers.netname ) );
-        }
-          }
-      }
-
       // Normal teamkill penalty
-      else {
+      if( !g_retribution.integer )
+      {
         if( attacker->client->ps.stats[ STAT_PTEAM ] == PTE_ALIENS )
           G_AddCreditToClient( attacker->client, -FREEKILL_ALIEN, qtrue );
         else if( attacker->client->ps.stats[ STAT_PTEAM ] == PTE_HUMANS )
@@ -333,7 +295,129 @@ void player_die( gentity_t *self, gentit
 
   //total up all the damage done by every client
   for( i = 0; i < MAX_CLIENTS; i++ )
+  {
     totalDamage += (float)self->credits[ i ];
+    totalTK += (float)self->client->tkcredits[ i ];
+  }
+  // punish players for damaging teammates
+  if ( g_retribution.integer && totalTK )
+  {
+    int totalPrice;
+    int max = HUMAN_MAX_CREDITS;
+
+    if ( self->client->ps.stats[ STAT_PTEAM ] == PTE_ALIENS )
+    {
+      totalPrice = BG_ClassCanEvolveFromTo( PCL_ALIEN_LEVEL0, self->client->ps.stats[ STAT_PCLASS ], ALIEN_MAX_KILLS, 0 );
+      max = ALIEN_MAX_KILLS;
+    }
+    else
+    {
+      totalPrice = BG_GetValueOfEquipment( &self->client->ps );
+    }
+
+    if ( self->client->ps.persistant[ PERS_CREDIT ] + totalPrice > max )
+      totalPrice = max - self->client->ps.persistant[ PERS_CREDIT ];
+
+    if ( totalPrice > 0 )
+    {
+      totalTK += totalDamage;
+      if( totalTK < self->client->ps.stats[ STAT_MAX_HEALTH ] )
+        totalTK = self->client->ps.stats[ STAT_MAX_HEALTH ];
+
+      if ( self->client->ps.stats[ STAT_PTEAM ] == PTE_HUMANS )
+      {
+        for ( i = 0; i < MAX_CLIENTS; i++ )
+        {
+          int price;
+          // no retribution if self damage or enemy damage or building damage or no damage from this client
+          if ( i == self - g_entities || !g_entities[ i ].client ||
+               !OnSameTeam( &g_entities[ i ], self ) ||
+               !self->client->tkcredits[ i ] )
+            continue;
+
+          // calculate retribution price (rounded up)
+          price = ( totalPrice * self->client->tkcredits[ i ] ) / totalTK + 0.5f;
+          self->client->tkcredits[ i ] = 0;
+
+          // check for enough credits
+          if ( g_entities[ i ].client->ps.persistant[ PERS_CREDIT ] < price )
+            price = g_entities[ i ].client->ps.persistant[ PERS_CREDIT ];
+          if ( price )
+          {
+            G_AddCreditToClient( self->client, price, qtrue );
+            G_AddCreditToClient( g_entities[ i ].client, -price, qtrue );
+
+            trap_SendServerCommand( self->client->ps.clientNum,
+              va( "print \"Received ^3%d credits ^7from %s ^7in retribution.\n\"",
+                price, g_entities[ i ].client->pers.netname ) );
+            trap_SendServerCommand( g_entities[ i ].client->ps.clientNum,
+              va( "print \"Transfered ^3%d credits ^7to %s ^7in retribution.\n\"",
+                price, self->client->pers.netname ) );
+          }
+        }
+      }
+      else
+      {
+        int toPay[ MAX_CLIENTS ] = { 0 };
+        int frags = totalPrice;
+        int damageForEvo = totalTK / totalPrice;
+        for ( i = 0; i < MAX_CLIENTS; i++ )
+        {
+          // no retribution if self damage or enemy damage or building damage or no damage from this client
+          if ( i == self - g_entities || !g_entities[ i ].client ||
+               !OnSameTeam( &g_entities[ i ], self ) ||
+               !self->client->tkcredits[ i ] )
+            continue;
+
+          // find out how many full evos this client needs to pay
+          toPay[ i ] = ( totalPrice * self->client->tkcredits[ i ] ) / totalTK;
+          if ( toPay[ i ] > g_entities[ i ].client->ps.persistant[ PERS_CREDIT ] )
+            toPay[ i ] = g_entities[ i ].client->ps.persistant[ PERS_CREDIT ];
+          frags -= toPay[ i ];
+          self->client->tkcredits[ i ] -= damageForEvo * toPay[ i ];
+        }
+
+        // if we have not met the evo count, continue stealing evos
+        while ( 1 )
+        {
+          int maximum = 0;
+          int topClient = 0;
+          for ( i = 0; i < MAX_CLIENTS; i++ )
+          {
+            if ( self->client->tkcredits[ i ] > maximum && g_entities[ i ].client->ps.persistant[ PERS_CREDIT ] )
+            {
+              maximum = self->client->tkcredits[ i ];
+              topClient = i;
+            }
+          }
+          if ( !maximum )
+            break;
+          toPay[ topClient ]++;
+          self->client->tkcredits[ topClient ] = 0;
+          frags--;
+          if ( !frags )
+           break;
+        }
+        
+        // now move the evos around
+        for ( i = 0; i < MAX_CLIENTS; i++ )
+        {
+          if ( !toPay[ i ] )
+            continue;
+          
+          G_AddCreditToClient( self->client, toPay[ i ], qtrue );
+          G_AddCreditToClient( g_entities[ i ].client, -toPay[ i ], qtrue );
+
+          trap_SendServerCommand( self->client->ps.clientNum,
+            va( "print \"Received ^3%d ^7evos from %s ^7in retribution.\n\"",
+              toPay[ i ], g_entities[ i ].client->pers.netname ) );
+          trap_SendServerCommand( g_entities[ i ].client->ps.clientNum,
+            va( "print \"Transfered ^3%d ^7evos to %s ^7in retribution.\n\"",
+              toPay[ i ], self->client->pers.netname ) );
+        }
+      }
+    }
+  }
 
   // if players did more than DAMAGE_FRACTION_FOR_KILL increment the stage counters
   if( !OnSameTeam( self, attacker ) && totalDamage >= ( self->client->ps.stats[ STAT_MAX_HEALTH ] * DAMAGE_FRACTION_FOR_KILL ) )
